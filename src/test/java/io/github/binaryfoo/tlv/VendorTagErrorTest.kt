package io.github.binaryfoo.tlv

import org.junit.Test
import org.hamcrest.MatcherAssert.assertThat
import org.hamcrest.Matchers.`is`
import org.junit.Assert
import java.util.HashSet
import kotlin.collections.filter
import kotlin.collections.map
import kotlin.collections.setOf

public class VendorTagErrorTest {

    @Test
    public fun commonTagError() {
        assertThat(CommonVendorErrorMode.isCommonError("91".decodeAsHex()), `is`(false))
        assertThat(CommonVendorErrorMode.isCommonError("9F89".decodeAsHex()), `is`(true))
        assertThat(CommonVendorErrorMode.isCommonError("9F8901".decodeAsHex()), `is`(true))
        assertThat(CommonVendorErrorMode.isCommonError("9FC101".decodeAsHex()), `is`(false))
    }

    @Test
    public fun findCommonTagErrorsInBerTlv() {
        try {
            BerTlv.parseListdecodeAsHex(), true)
            Assert.fail()
        } catch(e: TlvParseException) {
            val errors = HashSet(e.resultsSoFar.filter(::hasCommonVendorErrorTag).map { it.tag.hexString })
            assertThat(errors, `is`(setOf("9F8410")))
        }
    }
}

