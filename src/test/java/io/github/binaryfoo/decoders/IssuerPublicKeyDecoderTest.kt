package io.github.binaryfoo.decoders

import io.github.binaryfoo.crypto.RecoveredPublicKeyCertificate
import io.github.binaryfoo.tlv.ISOUtil
import org.junit.Test

import org.hamcrest.core.Is.`is`
import org.junit.Assert.assertThat

public class IssuerPublicKeyDecoderTest {

    @Test
    public fun certificateWithPaddedPublicKey() {
        val recovered = ISOUtil.hex2byte("6A0254133300121400000101019003A028E99BECB507C507243C2E8DF4FE56A0297CD0AE72E2CFA992A98C80788422DBE00A1395B1545B09D66CFAB9ECEAF413E3DFF8227BC80BF6DA7F142B32673C527BB79129B5965C0F5DC4C3732BE6FA284F2469CDC545CD8AF915D2DD4AF2E171F5D36D502C8F9498797B9DE111BF5EB97EF1820BA654E4867F09D6BB41BCB1E4FB3E9D287ABD670319181347312707BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB30BBB725EC32CEB6FF4A6334BB4F59CF048F2FBABC")
        val byteLengthOfCAModulus = 496 / 2
        val actual = decodeIssuerPublicKey(recovered, byteLengthOfCAModulus, 0)
        assertThat(actual.detail, io.github.binaryfoo.DecodedAsStringMatcher.decodedAsString("""Header: 6A
Format: 02
Identifier (PAN prefix): 54133300
Expiry Date (MMYY): 1214
Serial number: 000001
Hash algorithm: 01
Public key algorithm: 01
Public key length: 144
Public key exponent length: 03
Public key: A028E99BECB507C507243C2E8DF4FE56A0297CD0AE72E2CFA992A98C80788422DBE00A1395B1545B09D66CFAB9ECEAF413E3DFF8227BC80BF6DA7F142B32673C527BB79129B5965C0F5DC4C3732BE6FA284F2469CDC545CD8AF915D2DD4AF2E171F5D36D502C8F9498797B9DE111BF5EB97EF1820BA654E4867F09D6BB41BCB1E4FB3E9D287ABD670319181347312707
Hash: 30BBB725EC32CEB6FF4A6334BB4F59CF048F2FBA
Trailer: BC
"""))
        assertThat(actual.leftKeyPart, `is`("A028E99BECB507C507243C2E8DF4FE56A0297CD0AE72E2CFA992A98C80788422DBE00A1395B1545B09D66CFAB9ECEAF413E3DFF8227BC80BF6DA7F142B32673C527BB79129B5965C0F5DC4C3732BE6FA284F2469CDC545CD8AF915D2DD4AF2E171F5D36D502C8F9498797B9DE111BF5EB97EF1820BA654E4867F09D6BB41BCB1E4FB3E9D287ABD670319181347312707"))
    }

    @Test
    public fun certificateWithRemainder() {
        val recovered = ISOUtil.hex2byte("6A023569990012490006B001017001BD46CCE01464D4C4269D4CC5FB616119C4354ED18C85A936F9C44A7B0EED96AD97DB59D84B05A6E250631BA79FA7D75B07DD4586CE7700C64FFBB60EDB15E29C715D771C948999187EAEDF60CE18FE67E99C8BCE9DE31655E7EB9B692F502573CA65B7A7C167F86D9AAB90A9F9D10CF1387465F4FCAD14EEFDAFEE10A50B7C08BC")
        val actual = decodeIssuerPublicKey(recovered, 144, 0)
        assertThat(actual.leftKeyPart, `is`("BD46CCE01464D4C4269D4CC5FB616119C4354ED18C85A936F9C44A7B0EED96AD97DB59D84B05A6E250631BA79FA7D75B07DD4586CE7700C64FFBB60EDB15E29C715D771C948999187EAEDF60CE18FE67E99C8BCE9DE31655E7EB9B692F502573CA65B7A7C167F86D9AAB90A9"))
    }
}
